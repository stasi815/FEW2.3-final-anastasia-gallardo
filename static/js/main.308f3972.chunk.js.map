{"version":3,"sources":["components/Title.js","components/Home.js","components/StarWars.js","components/App.js","serviceWorker.js","index.js"],"names":["Title","props","name","Home","Component","StarWars","state","inputValue","swapiData","list","hwData","e","this","preventDefault","num","url","hwURL","response","fetch","hwResponse","console","log","then","res","ok","json","setState","catch","err","message","value","characters","map","item","height","mass","hair_color","eye_color","className","onClick","addCharacterToList","character","renderCharacter","characterList","renderCharacterList","onSubmit","handleSubmit","onChange","target","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.308f3972.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Title(props) {\n        const { name } = props\n        return (\n            <div>\n                { name }\n            </div>\n        )\n    }\n\n\nexport default Title","import React, { Component } from 'react'\nimport Title from './Title'\n\nclass Home extends Component {\n    render() {\n        return (\n            <div>\n                FEW 2.3\n                <Title name=\"Anastasia Gallardo\"/>\n            </div>\n        )\n    }\n}\n\nexport default Home","import React, { Component } from 'react'\nimport Title from './Title'\nimport './StarWars.css'\n\nclass StarWars extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            inputValue: '',\n            swapiData: null,\n            list: [],\n            hwData: null,\n        }\n    }\n\n    handleSubmit(e) {\n        const { inputValue } = this.state\n        e.preventDefault()\n        const num = inputValue\n        const url = `https://swapi.dev/api/people/${num}`\n        const hwURL = `https://swapi.dev/api/planets/${num}/`\n\n        const response = fetch(url)\n        const hwResponse = fetch(hwURL)\n        console.log(response)\n\n        response.then(res => {\n            console.log(res)\n            if (res.ok) {\n                return res.json()\n            }\n        }).then((json) => {\n            this.setState({ swapiData: json })\n        }).catch((err) => {\n            this.setState({ swapiData: null })\n            console.log('Fetching Error!')\n            console.log(err.message)\n        })\n\n        hwResponse.then(res => {\n            console.log(res)\n            if (res.ok) {\n                return res.json()\n            }\n        }).then((json) => {\n            this.setState({ hwData: json })\n        }).catch((err) => {\n            this.setState({ hwData: null })\n            console.log('Fetching Error!')\n            console.log(err.message)\n        })\n    }\n\n    addCharacterToList(value) {\n        this.setState({\n            list: [...this.state.list, value]\n        })\n    }\n\n    renderCharacterList() {\n        const { list } = this.state\n        const characters = list.map((item) => {\n            return <div>{item}</div>\n        })\n        console.log(list)\n        return characters\n    }\n\n    renderCharacter() {\n        const { swapiData, hwData } = this.state\n        if (swapiData === null) {\n            // If there is no data return undefined\n            return undefined\n          }\n\n        const { name, height, mass, hair_color, eye_color } = swapiData\n\n        return (\n            <div className=\"character-details\">\n                <Title name={name} />\n                <p>Height: {height}</p>\n                <p>Mass: {mass}</p>\n                <p>Hair Color: {hair_color}</p>\n                <p>Eye Color: {eye_color}</p>\n                <p>Homeworld: {hwData.name}</p>\n                <button\n                    onClick={(e) =>\n                        this.addCharacterToList(name)\n                    }>Save</button>\n            </div>\n        )\n\n    }\n\n    render() {\n        const { inputValue} = this.state\n        const character = this.renderCharacter()\n        const characterList = this.renderCharacterList()\n\n        return (\n            <div>\n                <form\n                    className=\"input-form\"\n                    onSubmit={\n                        e => this.handleSubmit(e)\n                    }>\n                    <input\n                        value={inputValue}\n                        onChange={e =>\n                            this.setState({ inputValue: e.target.value })}\n                            placeholder=\"enter number: 1-9\"\n                        />\n                    <button>Submit</button>\n                </form>\n                {character}\n                Your Saved List:\n                {characterList}\n            </div>\n        )\n    }\n}\n\nexport default StarWars","import React from 'react';\nimport Home from './Home'\nimport StarWars from './StarWars'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n      <StarWars />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './shippd.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}